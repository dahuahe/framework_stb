{
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"stb noramlmodule": {
		"prefix": "snoramlmodule",
		"body": [
			"class $1Module extends Module {",
			"private foc: Focus;",
			"private readonly eles = new HElement(\"\");",
			"private readonly box = new HElement(\"\");",
			"constructor(pageEvent: PageEvent) {",
			"super(pageEvent);",
			"this.initialize();",
			"this.subscribeToEvents();",
			"}",
			"protected initialize() {",
			"this.foc = new Focus({",
			"identCode: MType.$2,",
			"className: \"focus\",",
			"width: 0,",
			"height: 0,",
			"}, this.event);",
			"this.foc.initData(this.eles);",
			"}",
			"protected subscribeToEvents() {",
			"}",
			"loadData(ntt: any) {",
			"if (ntt) {",
			"// ...TODO",
			"}",
			"}",
			"recoverStatus() {}",
			"}",
			"$3"
		],
		"description": "列表组件"
	},
	"stb autotarget": {
		"prefix": "autotarget",
		"body": [
			",",
			"autoTarget: [",
			"{",
			"keyCode: Key.$1, target: MType.$2",
			"}",
			"]",
			"$3"
		],
		"description": "自动焦点配置"
	},
	"stb onfocus": {
		"prefix": "onfocus",
		"body": [
			"this.onfocus(MType.$1, (e) => {",
			"$2",
			"});"
		],
		"description": "Log output to console"
	},
	"stb onkeydown": {
		"prefix": "onkeydown",
		"body": [
			"this.onkeydown(MType.$1, (e) => {",
			"$2",
			"});"
		],
		"description": "Log output to console"
	},
	"stb onchanged": {
		"prefix": "onchanged",
		"body": [
			"this.onchanged(MType.$1, (e) => {",
			"$2",
			"});"
		],
		"description": "Log output to console"
	}
}